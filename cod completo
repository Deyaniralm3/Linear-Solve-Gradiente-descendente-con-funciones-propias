def transp (A):
    At=[]
    tam=len(A)
    for i in range (tam):
        aux=[]
        for j in range (tam):
            aux.append(A[j][i])
        At.append(aux)
    return At


def mult_mat(A,B):
    C=[]
    for i in range(len(A)):
        for j in range(len(B)):
            x=0
            for k in range(len(A[0])):
                x=x+A[i][k]*B[k]
        C.append(x)
    return C

#C=multp_mat(A_coef, b_coef)
#print(C)

def res (A,b):
    C=[i - j for i,j in zip(A, b)]
    return C

def mult_esc (A,k):
    A2=[]
    for i in range (len(A)):
        aux=[]
        if isinstance(A[0],list):
            for j in range (len(A[i])):
                x=A[i][j]
                aux.append(k*x)
                A2.append(aux)
        else:
            A2.append(k*A[i])
    return A2

A_coef = [[2.0, 1.0, -3.0], [5.0, -4.0, 1.0], [1.0, -1.0, -4.0]]
b_coef = [7.0, -19.0, 4.0]

x_start = [0.0, 0.0, 0.0]

def gradient(x, A, b):
	element_1 = mult_mat(transp(A),mult_mat(A, x))
	element_2 = mult_mat(transp(A), b)
	return res(element_1, element_2)


def linear_solv(A, b, x_sol, k=0.01, criteria=0.0001, max_iter=1000):
    for i in range(max_iter):
        x_sol = res(x_sol,mult_esc(gradient(x_sol, A, b),k))
        print (x_sol)
        btent=mult_mat(A,x_sol)
        error = sum(abs(i) for i in res(btent,b))
        if error < criteria:
            return x_sol
    
print("La solucion viene como :", linear_solv(A_coef, b_coef, x_start))
